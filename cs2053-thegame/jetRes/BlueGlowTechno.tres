[gd_resource type="ShaderMaterial" load_steps=3 format=3 uid="uid://bq8t3103efaep"]

[ext_resource type="Texture2D" uid="uid://bdyxdljyj1r8x" path="res://jetRes/Microscheme.png" id="1_j1mqw"]

[sub_resource type="Shader" id="Shader_681wy"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color = vec4(0.172, 0.411, 1, 1);
uniform sampler2D texture_albedo : source_color, filter_linear, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float glow_strength : hint_range(0.0, 10.0) = 1.0;
uniform vec4 line_color : source_color = vec4(0.172, 0.411, 1, 1);  // Blue color for lines

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	
	if (distance(albedo_tex.rgb, line_color.rgb) < 0.2) {
        // Apply emission to the lines
        vec3 emission = albedo_tex.rgb * glow_strength;
        ALBEDO = albedo_tex.rgb;
        EMISSION = emission;
    } else {
        // Regular texture for the background
        ALBEDO = albedo_tex.rgb;
        EMISSION = vec3(0.0);
	}
}"

[resource]
render_priority = 0
shader = SubResource("Shader_681wy")
shader_parameter/albedo = Color(0.172248, 0.411099, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.72
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(5, 5, 5)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/glow_strength = 1.0
shader_parameter/line_color = Color(0.172, 0.411, 1, 1)
shader_parameter/texture_albedo = ExtResource("1_j1mqw")
